generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  name      String?
  avatar    String?
  isAdmin   Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  orders    Order[]
  carts     Cart[]
  servers   Server[]
}

model Product {
  id          String   @id @default(cuid())
  name        String
  description String?
  imageUrl    String?
  ram         Int      // in GB
  cpu         Int      // in cores
  storage     Int      // in GB
  price       Float    // in INR
  billing     String   @default("monthly") // monthly, quarterly, yearly
  duration    Int      @default(30) // in days
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  orders      OrderItem[]
  servers     Server[]
}

model Order {
  id              String      @id @default(cuid())
  userId          String
  user            User        @relation(fields: [userId], references: [id])
  totalAmount     Float
  discount        Float       @default(0)
  finalAmount     Float
  status          String      @default("pending") // pending, paid, completed, cancelled
  paymentStatus   String      @default("pending") // pending, verified, failed
  paymentProof    String?     // screenshot URL
  isFirstOrder    Boolean     @default(false)
  items           OrderItem[]
  chatMessages    ChatMessage[]
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
}

model OrderItem {
  id        String   @id @default(cuid())
  orderId   String
  order     Order    @relation(fields: [orderId], references: [id])
  productId String
  product   Product  @relation(fields: [productId], references: [id])
  quantity  Int      @default(1)
  price     Float
  createdAt DateTime @default(now())
}

model Cart {
  id        String     @id @default(cuid())
  userId    String
  user      User       @relation(fields: [userId], references: [id])
  items     CartItem[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model CartItem {
  id        String   @id @default(cuid())
  cartId    String
  cart      Cart     @relation(fields: [cartId], references: [id])
  productId String
  quantity  Int      @default(1)
  createdAt DateTime @default(now())
}

model PterodactylSettings {
  id       String  @id @default(cuid())
  panelUrl String
  apiKey   String
  isActive Boolean @default(true)
}

model Upsell {
  id          String  @id @default(cuid())
  title       String
  description String
  type        String  // ram, cpu, storage
  amount      Int     // amount of resource
  oldPrice    Float
  newPrice    Float
  isActive    Boolean @default(true)
}

model Server {
  id                    String   @id @default(cuid())
  userId                String
  user                  User     @relation(fields: [userId], references: [id])
  productId             String
  product               Product  @relation(fields: [productId], references: [id])
  pterodactylId         Int?     // Pterodactyl server numeric ID
  pterodactylIdentifier String?  // Pterodactyl server UUID/identifier
  name                  String
  status                String   @default("active") // active, suspended, terminated
  expiresAt             DateTime
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
}

model ChatMessage {
  id        String   @id @default(cuid())
  orderId   String?
  order     Order?   @relation(fields: [orderId], references: [id])
  userId    String
  isAdmin   Boolean  @default(false)
  message   String
  createdAt DateTime @default(now())
}

model Invoice {
  id            String   @id @default(cuid())
  invoiceNumber String   @unique
  orderId       String   @unique
  userId        String
  customerName  String
  customerEmail String
  items         String   // JSON string of invoice items
  subtotal      Float
  discount      Float    @default(0)
  tax           Float    @default(0)
  total         Float
  status        String   @default("paid") // paid, pending, cancelled
  dueDate       DateTime
  paidDate      DateTime?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}
